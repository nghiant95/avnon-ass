import { isDevMode } from '@angular/core';
export function selectIdValue(entity, selectId) {
    const key = selectId(entity);
    if (isDevMode() && key === undefined) {
        console.warn('The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());
    }
    return key;
}
export function ensureEntitiesArray(entities) {
    if (!Array.isArray(entities)) {
        entities = Object.values(entities);
    }
    return entities;
}
export function splitAddedUpdatedEntities(newEntities, selectId, state) {
    newEntities = ensureEntitiesArray(newEntities);
    const added = [];
    const updated = [];
    for (const entity of newEntities) {
        const id = selectIdValue(entity, selectId);
        if (id in state.entities) {
            updated.push({ id, changes: entity });
        }
        else {
            added.push(entity);
        }
    }
    return [added, updated];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9uZ3J4LXNsaWNlL2VudGl0eS9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUMsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsTUFBYSxFQUNiLFFBQTJCO0lBRTNCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU3QixJQUFJLFNBQVMsRUFBRSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7UUFDcEMsT0FBTyxDQUFDLElBQUksQ0FDVix3RUFBd0UsRUFDeEUsaUVBQWlFLEVBQ2pFLDZCQUE2QixFQUM3QixNQUFNLEVBQ04sZ0NBQWdDLEVBQ2hDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FDcEIsQ0FBQztLQUNIO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxRQUFvRDtJQUVwRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1QixRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNwQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQ3ZDLFdBQXVELEVBQ3ZELFFBQTJCLEVBQzNCLEtBQXlCO0lBRXpCLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUUvQyxNQUFNLEtBQUssR0FBWSxFQUFFLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQW9CLEVBQUUsQ0FBQztJQUVwQyxLQUFLLE1BQU0sTUFBTSxJQUFJLFdBQVcsRUFBRTtRQUNoQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLElBQUksRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtLQUNGO0lBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEVudGl0eUlkLCBFbnRpdHlTdGF0ZSwgSWRTZWxlY3RvciwgVXBkYXRlIH0gZnJvbSAnLi90eXBpbmdzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdElkVmFsdWU8VERhdGE+KFxuICBlbnRpdHk6IFREYXRhLFxuICBzZWxlY3RJZDogSWRTZWxlY3RvcjxURGF0YT5cbik6IEVudGl0eUlkIHtcbiAgY29uc3Qga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcblxuICBpZiAoaXNEZXZNb2RlKCkgJiYga2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLicsXG4gICAgICAnWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uJyxcbiAgICAgICdUaGUgZW50aXR5IHRoYXQgd2FzIHBhc3NlZDonLFxuICAgICAgZW50aXR5LFxuICAgICAgJ1RoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uOicsXG4gICAgICBzZWxlY3RJZC50b1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5PFREYXRhPihcbiAgZW50aXRpZXM6IHJlYWRvbmx5IFREYXRhW10gfCBSZWNvcmQ8RW50aXR5SWQsIFREYXRhPlxuKTogcmVhZG9ubHkgVERhdGFbXSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICB9XG5cbiAgcmV0dXJuIGVudGl0aWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllczxURGF0YT4oXG4gIG5ld0VudGl0aWVzOiByZWFkb25seSBURGF0YVtdIHwgUmVjb3JkPEVudGl0eUlkLCBURGF0YT4sXG4gIHNlbGVjdElkOiBJZFNlbGVjdG9yPFREYXRhPixcbiAgc3RhdGU6IEVudGl0eVN0YXRlPFREYXRhPlxuKTogW1REYXRhW10sIFVwZGF0ZTxURGF0YT5bXV0ge1xuICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xuXG4gIGNvbnN0IGFkZGVkOiBURGF0YVtdID0gW107XG4gIGNvbnN0IHVwZGF0ZWQ6IFVwZGF0ZTxURGF0YT5bXSA9IFtdO1xuXG4gIGZvciAoY29uc3QgZW50aXR5IG9mIG5ld0VudGl0aWVzKSB7XG4gICAgY29uc3QgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xuICAgICAgdXBkYXRlZC5wdXNoKHsgaWQsIGNoYW5nZXM6IGVudGl0eSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2FkZGVkLCB1cGRhdGVkXTtcbn1cbiJdfQ==