import { createFeatureSelector } from '@ngrx/store';
import { createSliceActions } from './create-slice-actions';
import { createSliceReducer } from './create-slice-reducer';
import { createSliceSelectors } from './create-slice-selectors';
import { classify } from './utils';
function defaultSliceActionNameGetter(featureName, actionName) {
    return `[${classify(featureName)}] ${actionName}`;
}
export function noopReducer() {
    return (() => { });
}
export function createSlice({ name, initialState, reducers, extraReducers, reducersToActions, sliceActionNameGetter = defaultSliceActionNameGetter, }) {
    const featureSelector = createFeatureSelector(name);
    const nestedSelectors = createSliceSelectors(initialState, featureSelector);
    const actions = createSliceActions(name, sliceActionNameGetter, reducers, reducersToActions);
    const reducer = createSliceReducer(initialState, actions, reducers, extraReducers);
    return {
        name,
        reducer,
        actions,
        selectors: {
            [`select${classify(name)}State`]: featureSelector,
            ...nestedSelectors,
        },
    };
}
export function createNamespacedSlice({ name, initialState, reducers, extraReducers, reducersToActions, sliceActionNameGetter = defaultSliceActionNameGetter, }) {
    const { name: sliceName, reducer, selectors, actions, } = createSlice({
        name,
        initialState,
        reducers,
        extraReducers,
        reducersToActions,
        sliceActionNameGetter,
    });
    const classifiedName = classify(name);
    return {
        [`${classifiedName}Feature`]: {
            name: sliceName,
            reducer,
        },
        [`${classifiedName}Actions`]: actions,
        [`${classifiedName}Selectors`]: selectors,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNsaWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmdyeC1zbGljZS9zcmMvbGliL2NyZWF0ZS1zbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFRaEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVuQyxTQUFTLDRCQUE0QixDQUNuQyxXQUFtQixFQUNuQixVQUFrQjtJQUVsQixPQUFPLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLFVBQVUsRUFBRSxDQUFDO0FBQ3BELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVztJQU16QixPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUUwRCxDQUFDO0FBQzdFLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUl6QixFQUNBLElBQUksRUFDSixZQUFZLEVBQ1osUUFBUSxFQUNSLGFBQWEsRUFDYixpQkFBaUIsRUFDakIscUJBQXFCLEdBQUcsNEJBQTRCLEdBQ0Y7SUFLbEQsTUFBTSxlQUFlLEdBQUcscUJBQXFCLENBQWEsSUFBSSxDQUFDLENBQUM7SUFFaEUsTUFBTSxlQUFlLEdBQUcsb0JBQW9CLENBQzFDLFlBQVksRUFDWixlQUFlLENBQ2hCLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FDaEMsSUFBSSxFQUNKLHFCQUFxQixFQUNyQixRQUFRLEVBQ1IsaUJBQWlCLENBQ2xCLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FDaEMsWUFBWSxFQUNaLE9BQU8sRUFDUCxRQUFRLEVBQ1IsYUFBYSxDQUNkLENBQUM7SUFFRixPQUFPO1FBQ0wsSUFBSTtRQUNKLE9BQU87UUFDUCxPQUFPO1FBQ1AsU0FBUyxFQUFFO1lBQ1QsQ0FBQyxTQUFTLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZTtZQUNqRCxHQUFHLGVBQWU7U0FDd0M7S0FDN0QsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBSW5DLEVBQ0EsSUFBSSxFQUNKLFlBQVksRUFDWixRQUFRLEVBQ1IsYUFBYSxFQUNiLGlCQUFpQixFQUNqQixxQkFBcUIsR0FBRyw0QkFBNEIsR0FDRjtJQUtsRCxNQUFNLEVBQ0osSUFBSSxFQUFFLFNBQVMsRUFDZixPQUFPLEVBQ1AsU0FBUyxFQUNULE9BQU8sR0FDUixHQUFHLFdBQVcsQ0FBQztRQUNkLElBQUk7UUFDSixZQUFZO1FBQ1osUUFBUTtRQUNSLGFBQWE7UUFDYixpQkFBaUI7UUFDakIscUJBQXFCO0tBQ3RCLENBQUMsQ0FBQztJQUVILE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV0QyxPQUFPO1FBQ0wsQ0FBQyxHQUFHLGNBQWMsU0FBUyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPO1NBQ1I7UUFDRCxDQUFDLEdBQUcsY0FBYyxTQUFTLENBQUMsRUFBRSxPQUFPO1FBQ3JDLENBQUMsR0FBRyxjQUFjLFdBQVcsQ0FBQyxFQUFFLFNBQVM7S0FDYyxDQUFDO0FBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVGZWF0dXJlU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgdHlwZSB7IERyYWZ0IH0gZnJvbSAnaW1tZXInO1xuaW1wb3J0IHsgY3JlYXRlU2xpY2VBY3Rpb25zIH0gZnJvbSAnLi9jcmVhdGUtc2xpY2UtYWN0aW9ucyc7XG5pbXBvcnQgeyBjcmVhdGVTbGljZVJlZHVjZXIgfSBmcm9tICcuL2NyZWF0ZS1zbGljZS1yZWR1Y2VyJztcbmltcG9ydCB7IGNyZWF0ZVNsaWNlU2VsZWN0b3JzIH0gZnJvbSAnLi9jcmVhdGUtc2xpY2Utc2VsZWN0b3JzJztcbmltcG9ydCB0eXBlIHtcbiAgTmFtZXNwYWNlZFNsaWNlLFxuICBQYXlsb2FkQWN0aW9uLFxuICBTbGljZSxcbiAgU2xpY2VDYXNlUmVkdWNlcnMsXG4gIFNsaWNlT3B0aW9ucyxcbn0gZnJvbSAnLi90eXBpbmdzJztcbmltcG9ydCB7IGNsYXNzaWZ5IH0gZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTbGljZUFjdGlvbk5hbWVHZXR0ZXIoXG4gIGZlYXR1cmVOYW1lOiBzdHJpbmcsXG4gIGFjdGlvbk5hbWU6IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBbJHtjbGFzc2lmeShmZWF0dXJlTmFtZSl9XSAke2FjdGlvbk5hbWV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3BSZWR1Y2VyPFxuICBBY3Rpb25Qcm9wcyA9IGZhbHNlLFxuICBTbGljZVN0YXRlID0gYW55XG4+KCk6IEFjdGlvblByb3BzIGV4dGVuZHMgZmFsc2VcbiAgPyAoc3RhdGU6IERyYWZ0PFNsaWNlU3RhdGU+KSA9PiB2b2lkXG4gIDogKHN0YXRlOiBEcmFmdDxTbGljZVN0YXRlPiwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPEFjdGlvblByb3BzPikgPT4gdm9pZCB7XG4gIHJldHVybiAoKCkgPT4ge30pIGFzIHVua25vd24gYXMgQWN0aW9uUHJvcHMgZXh0ZW5kcyBmYWxzZVxuICAgID8gKHN0YXRlOiBEcmFmdDxTbGljZVN0YXRlPikgPT4gdm9pZFxuICAgIDogKHN0YXRlOiBEcmFmdDxTbGljZVN0YXRlPiwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPEFjdGlvblByb3BzPikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNsaWNlPFxuICBTbGljZVN0YXRlIGV4dGVuZHMgb2JqZWN0LFxuICBTbGljZU5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXG4gIENhc2VSZWR1Y2VycyBleHRlbmRzIFNsaWNlQ2FzZVJlZHVjZXJzPFNsaWNlU3RhdGU+ID0gU2xpY2VDYXNlUmVkdWNlcnM8U2xpY2VTdGF0ZT5cbj4oe1xuICBuYW1lLFxuICBpbml0aWFsU3RhdGUsXG4gIHJlZHVjZXJzLFxuICBleHRyYVJlZHVjZXJzLFxuICByZWR1Y2Vyc1RvQWN0aW9ucyxcbiAgc2xpY2VBY3Rpb25OYW1lR2V0dGVyID0gZGVmYXVsdFNsaWNlQWN0aW9uTmFtZUdldHRlcixcbn06IFNsaWNlT3B0aW9uczxTbGljZU5hbWUsIFNsaWNlU3RhdGUsIENhc2VSZWR1Y2Vycz4pOiBTbGljZTxcbiAgU2xpY2VTdGF0ZSxcbiAgU2xpY2VOYW1lLFxuICBDYXNlUmVkdWNlcnNcbj4ge1xuICBjb25zdCBmZWF0dXJlU2VsZWN0b3IgPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8U2xpY2VTdGF0ZT4obmFtZSk7XG5cbiAgY29uc3QgbmVzdGVkU2VsZWN0b3JzID0gY3JlYXRlU2xpY2VTZWxlY3RvcnM8U2xpY2VTdGF0ZT4oXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGZlYXR1cmVTZWxlY3RvclxuICApO1xuXG4gIGNvbnN0IGFjdGlvbnMgPSBjcmVhdGVTbGljZUFjdGlvbnM8U2xpY2VTdGF0ZSwgU2xpY2VOYW1lLCBDYXNlUmVkdWNlcnM+KFxuICAgIG5hbWUsXG4gICAgc2xpY2VBY3Rpb25OYW1lR2V0dGVyLFxuICAgIHJlZHVjZXJzLFxuICAgIHJlZHVjZXJzVG9BY3Rpb25zXG4gICk7XG5cbiAgY29uc3QgcmVkdWNlciA9IGNyZWF0ZVNsaWNlUmVkdWNlcjxTbGljZVN0YXRlLCBTbGljZU5hbWUsIENhc2VSZWR1Y2Vycz4oXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGFjdGlvbnMsXG4gICAgcmVkdWNlcnMsXG4gICAgZXh0cmFSZWR1Y2Vyc1xuICApO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICByZWR1Y2VyLFxuICAgIGFjdGlvbnMsXG4gICAgc2VsZWN0b3JzOiB7XG4gICAgICBbYHNlbGVjdCR7Y2xhc3NpZnkobmFtZSl9U3RhdGVgXTogZmVhdHVyZVNlbGVjdG9yLFxuICAgICAgLi4ubmVzdGVkU2VsZWN0b3JzLFxuICAgIH0gYXMgU2xpY2U8U2xpY2VTdGF0ZSwgU2xpY2VOYW1lLCBDYXNlUmVkdWNlcnM+WydzZWxlY3RvcnMnXSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5hbWVzcGFjZWRTbGljZTxcbiAgU2xpY2VTdGF0ZSBleHRlbmRzIG9iamVjdCxcbiAgU2xpY2VOYW1lIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBDYXNlUmVkdWNlcnMgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2VyczxTbGljZVN0YXRlPiA9IFNsaWNlQ2FzZVJlZHVjZXJzPFNsaWNlU3RhdGU+XG4+KHtcbiAgbmFtZSxcbiAgaW5pdGlhbFN0YXRlLFxuICByZWR1Y2VycyxcbiAgZXh0cmFSZWR1Y2VycyxcbiAgcmVkdWNlcnNUb0FjdGlvbnMsXG4gIHNsaWNlQWN0aW9uTmFtZUdldHRlciA9IGRlZmF1bHRTbGljZUFjdGlvbk5hbWVHZXR0ZXIsXG59OiBTbGljZU9wdGlvbnM8U2xpY2VOYW1lLCBTbGljZVN0YXRlLCBDYXNlUmVkdWNlcnM+KTogTmFtZXNwYWNlZFNsaWNlPFxuICBTbGljZVN0YXRlLFxuICBTbGljZU5hbWUsXG4gIENhc2VSZWR1Y2Vyc1xuPiB7XG4gIGNvbnN0IHtcbiAgICBuYW1lOiBzbGljZU5hbWUsXG4gICAgcmVkdWNlcixcbiAgICBzZWxlY3RvcnMsXG4gICAgYWN0aW9ucyxcbiAgfSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2VycyxcbiAgICBleHRyYVJlZHVjZXJzLFxuICAgIHJlZHVjZXJzVG9BY3Rpb25zLFxuICAgIHNsaWNlQWN0aW9uTmFtZUdldHRlcixcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NpZmllZE5hbWUgPSBjbGFzc2lmeShuYW1lKTtcblxuICByZXR1cm4ge1xuICAgIFtgJHtjbGFzc2lmaWVkTmFtZX1GZWF0dXJlYF06IHtcbiAgICAgIG5hbWU6IHNsaWNlTmFtZSxcbiAgICAgIHJlZHVjZXIsXG4gICAgfSxcbiAgICBbYCR7Y2xhc3NpZmllZE5hbWV9QWN0aW9uc2BdOiBhY3Rpb25zLFxuICAgIFtgJHtjbGFzc2lmaWVkTmFtZX1TZWxlY3RvcnNgXTogc2VsZWN0b3JzLFxuICB9IGFzIE5hbWVzcGFjZWRTbGljZTxTbGljZVN0YXRlLCBTbGljZU5hbWUsIENhc2VSZWR1Y2Vycz47XG59XG4iXX0=