{"version":3,"file":"ngrx-slice-entity.mjs","sources":["../../../../packages/ngrx-slice/entity/src/lib/entity-state.ts","../../../../packages/ngrx-slice/entity/src/lib/state-adapter.ts","../../../../packages/ngrx-slice/entity/src/lib/utils.ts","../../../../packages/ngrx-slice/entity/src/lib/unsorted-state-adapter.ts","../../../../packages/ngrx-slice/entity/src/lib/sorted-state-adapter.ts","../../../../packages/ngrx-slice/entity/src/lib/state-selectors.ts","../../../../packages/ngrx-slice/entity/src/lib/create-slice-entity-adapter.ts","../../../../packages/ngrx-slice/entity/src/index.ts","../../../../packages/ngrx-slice/entity/src/ngrx-slice-entity.ts"],"sourcesContent":["import type { EntityState } from './typings';\n\nfunction getInitialEntityState<TState>(): EntityState<TState> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n\nexport function createInitialStateFactory<TState>() {\n  function getInitialState(): EntityState<TState>;\n  function getInitialState<TAdditionalState extends object>(\n    additionalState: TAdditionalState\n  ): EntityState<TState> & TAdditionalState;\n  function getInitialState(additionalState: Record<string, unknown> = {}) {\n    return Object.assign(\n      getInitialEntityState(),\n      additionalState\n    ) as EntityState<TState>;\n  }\n\n  return { getInitialState };\n}\n","import { produce, isDraft } from 'immer';\nimport type { PayloadAction } from 'ngrx-slice';\nimport type { EntityState, PreventAny } from './typings';\n\nexport function createSingleArgumentStateOperator<TData>(\n  mutator: (state: EntityState<TData>) => void\n) {\n  const operator = createStateOperator((_, state: EntityState<TData>) =>\n    mutator(state)\n  );\n\n  return function operation<TState extends EntityState<TData>>(\n    state: PreventAny<TState, TData>\n  ): TState {\n    return operator(state as TState, undefined) as TState;\n  };\n}\n\nexport function createStateOperator<TData, TArg>(\n  mutator: (arg: TArg, state: EntityState<TData>) => void\n) {\n  return function operation<TState extends EntityState<TData>>(\n    state: TState,\n    arg: TArg | PayloadAction\n  ) {\n    function isPayloadActionArg(\n      arg: TArg | PayloadAction\n    ): arg is PayloadAction {\n      return typeof arg === 'object' && arg != null && 'type' in arg;\n    }\n\n    const runMutator = (draft: EntityState<TData>) => {\n      if (isPayloadActionArg(arg)) {\n        const { type: _removedType, _payload: _removedPayload, ...rest } = arg;\n        if (Object.keys(rest).length > 1) {\n          mutator(rest as TArg, draft);\n        } else {\n          mutator(Object.values(rest).pop(), draft);\n        }\n      } else {\n        mutator(arg, draft);\n      }\n    };\n\n    if (isDraft(state)) {\n      runMutator(state);\n      return state;\n    }\n\n    return produce(state, runMutator);\n  };\n}\n","import { isDevMode } from '@angular/core';\nimport type { EntityId, EntityState, IdSelector, Update } from './typings';\n\nexport function selectIdValue<TData>(\n  entity: TData,\n  selectId: IdSelector<TData>\n): EntityId {\n  const key = selectId(entity);\n\n  if (isDevMode() && key === undefined) {\n    console.warn(\n      'The entity passed to the `selectId` implementation returned undefined.',\n      'You should probably provide your own `selectId` implementation.',\n      'The entity that was passed:',\n      entity,\n      'The `selectId` implementation:',\n      selectId.toString()\n    );\n  }\n\n  return key;\n}\n\nexport function ensureEntitiesArray<TData>(\n  entities: readonly TData[] | Record<EntityId, TData>\n): readonly TData[] {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n\n  return entities;\n}\n\nexport function splitAddedUpdatedEntities<TData>(\n  newEntities: readonly TData[] | Record<EntityId, TData>,\n  selectId: IdSelector<TData>,\n  state: EntityState<TData>\n): [TData[], Update<TData>[]] {\n  newEntities = ensureEntitiesArray(newEntities);\n\n  const added: TData[] = [];\n  const updated: Update<TData>[] = [];\n\n  for (const entity of newEntities) {\n    const id = selectIdValue(entity, selectId);\n    if (id in state.entities) {\n      updated.push({ id, changes: entity });\n    } else {\n      added.push(entity);\n    }\n  }\n  return [added, updated];\n}\n","import {\n  createSingleArgumentStateOperator,\n  createStateOperator,\n} from './state-adapter';\nimport type {\n  EntityId,\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n} from './typings';\nimport {\n  ensureEntitiesArray,\n  selectIdValue,\n  splitAddedUpdatedEntities,\n} from './utils';\n\nexport function createUnsortedStateAdapter<TData>(\n  selectId: IdSelector<TData>\n): EntityStateAdapter<TData> {\n  type TState = EntityState<TData>;\n\n  function addOneMutably(entity: TData, state: TState): void {\n    const key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) return;\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n\n  function addManyMutably(\n    entities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    entities = ensureEntitiesArray(entities);\n\n    for (const entity of entities) {\n      addOneMutably(entity, state);\n    }\n  }\n\n  function setOneMutably(entity: TData, state: TState): void {\n    const key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n\n    state.entities[key] = entity;\n  }\n\n  function setManyMutably(\n    entities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    entities = ensureEntitiesArray(entities);\n\n    for (const entity of entities) {\n      setOneMutably(entity, state);\n    }\n  }\n\n  function setAllMutably(\n    entities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    entities = ensureEntitiesArray(entities);\n\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n  }\n\n  function removeManyMutably(keys: readonly EntityId[], state: TState): void {\n    let didMutate = false;\n\n    keys.forEach((key) => {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id) => id in state.entities);\n    }\n  }\n\n  function removeOneMutably(key: EntityId, state: TState): void {\n    return removeManyMutably([key], state);\n  }\n\n  function removeAllMutably(state: TState): void {\n    Object.assign(state, {\n      ids: [],\n      entities: {},\n    });\n  }\n\n  function takeNewKey(\n    keys: { [id: string]: EntityId },\n    update: Update<TData>,\n    state: TState\n  ): boolean {\n    const original = state.entities[update.id];\n    const updated: TData = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return hasNewKey;\n  }\n\n  function updateManyMutably(\n    updates: ReadonlyArray<Update<TData>>,\n    state: TState\n  ): void {\n    const newKeys: { [id: string]: EntityId } = {};\n\n    const updatesPerEntity: { [id: string]: Update<TData> } = {};\n\n    updates.forEach((update) => {\n      // Only apply updates to entities that currently exist\n      if (update.id in state.entities) {\n        // If there are multiple updates to one entity, merge them together\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: {\n            ...(updatesPerEntity[update.id]\n              ? updatesPerEntity[update.id].changes\n              : null),\n            ...update.changes,\n          },\n        };\n      }\n    });\n\n    updates = Object.values(updatesPerEntity);\n\n    const didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      const didMutateIds =\n        updates.filter((update) => takeNewKey(newKeys, update, state)).length >\n        0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id) => newKeys[id] || id);\n      }\n    }\n  }\n\n  function updateOneMutably(update: Update<TData>, state: TState): void {\n    return updateManyMutably([update], state);\n  }\n\n  function upsertManyMutably(\n    newEntities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    const [added, updated] = splitAddedUpdatedEntities<TData>(\n      newEntities,\n      selectId,\n      state\n    );\n\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n\n  function upsertOneMutably(entity: TData, state: TState): void {\n    return upsertManyMutably([entity], state);\n  }\n\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  } as EntityStateAdapter<TData>;\n}\n","import { createStateOperator } from './state-adapter';\nimport type {\n  Comparer,\n  EntityId,\n  EntityState,\n  EntityStateAdapter,\n  IdSelector,\n  Update,\n} from './typings';\nimport { createUnsortedStateAdapter } from './unsorted-state-adapter';\nimport {\n  ensureEntitiesArray,\n  selectIdValue,\n  splitAddedUpdatedEntities,\n} from './utils';\n\nexport function createSortedStateAdapter<TData>(\n  selectId: IdSelector<TData>,\n  sortComparer: Comparer<TData>\n): EntityStateAdapter<TData> {\n  type TState = EntityState<TData>;\n\n  const { removeOne, removeMany, removeAll } =\n    createUnsortedStateAdapter(selectId);\n\n  function addOneMutably(entity: TData, state: TState): void {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(\n    newEntities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    newEntities = ensureEntitiesArray(newEntities);\n\n    const models = newEntities.filter(\n      (model) => !(selectIdValue(model, selectId) in state.entities)\n    );\n\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n\n  function setOneMutably(entity: TData, state: TState): void {\n    return setManyMutably([entity], state);\n  }\n\n  function setManyMutably(\n    newEntities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      merge(newEntities, state);\n    }\n  }\n\n  function setAllMutably(\n    newEntities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(newEntities, state);\n  }\n\n  function updateOneMutably(update: Update<TData>, state: TState): void {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(\n    models: TData[],\n    update: Update<TData>,\n    state: TState\n  ): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const original = state.entities[update.id];\n    const updated = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(\n    updates: ReadonlyArray<Update<TData>>,\n    state: TState\n  ): void {\n    const models: TData[] = [];\n\n    updates.forEach((update) => takeUpdatedModel(models, update, state));\n\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n\n  function upsertOneMutably(entity: TData, state: TState): void {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(\n    newEntities: readonly TData[] | Record<EntityId, TData>,\n    state: TState\n  ): void {\n    const [added, updated] = splitAddedUpdatedEntities<TData>(\n      newEntities,\n      selectId,\n      state\n    );\n\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n\n  function areArraysEqual(a: readonly unknown[], b: readonly unknown[]) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (let i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  function merge(models: readonly TData[], state: TState): void {\n    // Insert/overwrite all new/updated\n    models.forEach((model) => {\n      state.entities[selectId(model)] = model;\n    });\n\n    const allEntities = Object.values(state.entities) as TData[];\n\n    allEntities.sort(sortComparer);\n\n    const newSortedIds = allEntities.map(selectId);\n    const { ids } = state;\n\n    if (!areArraysEqual(ids, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n  } as EntityStateAdapter<TData>;\n}\n","import { createSelector } from '@ngrx/store';\nimport type {\n  Dictionary,\n  EntityId,\n  EntitySelectors,\n  EntityState,\n} from './typings';\n\nexport function createSelectorsFactory<TData>() {\n  function getSelectors(): EntitySelectors<TData, EntityState<TData>>;\n  function getSelectors<TState>(\n    selectState: (state: TState) => EntityState<TData>\n  ): EntitySelectors<TData, TState>;\n  function getSelectors(\n    selectState?: (state: any) => EntityState<TData>\n  ): EntitySelectors<TData, any> {\n    const selectIds = (state: any) => state.ids as EntityId[];\n    const selectEntities = (state: any) => state.entities as Dictionary<TData>;\n\n    const selectAll = createSelector(\n      selectIds,\n      selectEntities,\n      (ids, entities) => ids.map((id) => entities[id]) as TData[]\n    );\n\n    const selectTotal = createSelector(selectIds, (ids) => ids.length);\n\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n      } as EntitySelectors<TData, any>;\n    }\n\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: createSelector(selectState, selectEntities),\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n    } as EntitySelectors<TData, any>;\n  }\n\n  return { getSelectors };\n}\n","import { createInitialStateFactory } from './entity-state';\nimport { createSortedStateAdapter } from './sorted-state-adapter';\nimport { createSelectorsFactory } from './state-selectors';\nimport {\n  Comparer,\n  EntityAdapter,\n  EntityDefinition,\n  EntityId,\n  IdSelector,\n} from './typings';\nimport { createUnsortedStateAdapter } from './unsorted-state-adapter';\n\nexport function createSliceEntityAdapter<TData>(\n  options: {\n    selectId?: IdSelector<TData>;\n    sortComparer?: false | Comparer<TData>;\n  } = {}\n): EntityAdapter<TData> {\n  const { selectId, sortComparer }: EntityDefinition<TData> = {\n    sortComparer: false,\n    selectId: (instance) =>\n      (instance as unknown as Record<string, EntityId>)['id'],\n    ...options,\n  };\n\n  const stateFactory = createInitialStateFactory<TData>();\n  const selectorsFactory = createSelectorsFactory<TData>();\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter<TData>(selectId, sortComparer)\n    : createUnsortedStateAdapter<TData>(selectId);\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","/*\n * Public API Surface of ngrx-slice/entity\n */\nexport * from './lib/create-slice-entity-adapter';\nexport * from './lib/typings';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;AAEA,SAAS,qBAAqB,GAAA;IAC5B,OAAO;AACL,QAAA,GAAG,EAAE,EAAE;AACP,QAAA,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC;SAEe,yBAAyB,GAAA;IAKvC,SAAS,eAAe,CAAC,eAAA,GAA2C,EAAE,EAAA;QACpE,OAAO,MAAM,CAAC,MAAM,CAClB,qBAAqB,EAAE,EACvB,eAAe,CACO,CAAC;KAC1B;IAED,OAAO,EAAE,eAAe,EAAE,CAAC;AAC7B;;AClBM,SAAU,iCAAiC,CAC/C,OAA4C,EAAA;AAE5C,IAAA,MAAM,QAAQ,GAAG,mBAAmB,CAAC,CAAC,CAAC,EAAE,KAAyB,KAChE,OAAO,CAAC,KAAK,CAAC,CACf,CAAC;IAEF,OAAO,SAAS,SAAS,CACvB,KAAgC,EAAA;AAEhC,QAAA,OAAO,QAAQ,CAAC,KAAe,EAAE,SAAS,CAAW,CAAC;AACxD,KAAC,CAAC;AACJ,CAAC;AAEK,SAAU,mBAAmB,CACjC,OAAuD,EAAA;AAEvD,IAAA,OAAO,SAAS,SAAS,CACvB,KAAa,EACb,GAAyB,EAAA;QAEzB,SAAS,kBAAkB,CACzB,GAAyB,EAAA;AAEzB,YAAA,OAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI,IAAI,MAAM,IAAI,GAAG,CAAC;SAChE;AAED,QAAA,MAAM,UAAU,GAAG,CAAC,KAAyB,KAAI;AAC/C,YAAA,IAAI,kBAAkB,CAAC,GAAG,CAAC,EAAE;AAC3B,gBAAA,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC;gBACvE,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAChC,oBAAA,OAAO,CAAC,IAAY,EAAE,KAAK,CAAC,CAAC;AAC9B,iBAAA;AAAM,qBAAA;AACL,oBAAA,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;AAC3C,iBAAA;AACF,aAAA;AAAM,iBAAA;AACL,gBAAA,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACrB,aAAA;AACH,SAAC,CAAC;AAEF,QAAA,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;YAClB,UAAU,CAAC,KAAK,CAAC,CAAC;AAClB,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;AAED,QAAA,OAAO,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACpC,KAAC,CAAC;AACJ;;AChDgB,SAAA,aAAa,CAC3B,MAAa,EACb,QAA2B,EAAA;AAE3B,IAAA,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AAE7B,IAAA,IAAI,SAAS,EAAE,IAAI,GAAG,KAAK,SAAS,EAAE;AACpC,QAAA,OAAO,CAAC,IAAI,CACV,wEAAwE,EACxE,iEAAiE,EACjE,6BAA6B,EAC7B,MAAM,EACN,gCAAgC,EAChC,QAAQ,CAAC,QAAQ,EAAE,CACpB,CAAC;AACH,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;AAEK,SAAU,mBAAmB,CACjC,QAAoD,EAAA;AAEpD,IAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;AAC5B,QAAA,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACpC,KAAA;AAED,IAAA,OAAO,QAAQ,CAAC;AAClB,CAAC;SAEe,yBAAyB,CACvC,WAAuD,EACvD,QAA2B,EAC3B,KAAyB,EAAA;AAEzB,IAAA,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAE/C,MAAM,KAAK,GAAY,EAAE,CAAC;IAC1B,MAAM,OAAO,GAAoB,EAAE,CAAC;AAEpC,IAAA,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;QAChC,MAAM,EAAE,GAAG,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC3C,QAAA,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;YACxB,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;AACvC,SAAA;AAAM,aAAA;AACL,YAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpB,SAAA;AACF,KAAA;AACD,IAAA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1B;;ACnCM,SAAU,0BAA0B,CACxC,QAA2B,EAAA;AAI3B,IAAA,SAAS,aAAa,CAAC,MAAa,EAAE,KAAa,EAAA;QACjD,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAE5C,QAAA,IAAI,GAAG,IAAI,KAAK,CAAC,QAAQ;YAAE,OAAO;AAElC,QAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,QAAA,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;KAC9B;AAED,IAAA,SAAS,cAAc,CACrB,QAAoD,EACpD,KAAa,EAAA;AAEb,QAAA,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAEzC,QAAA,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AAC7B,YAAA,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9B,SAAA;KACF;AAED,IAAA,SAAS,aAAa,CAAC,MAAa,EAAE,KAAa,EAAA;QACjD,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC5C,IAAI,EAAE,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;AAC5B,YAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,SAAA;AAED,QAAA,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;KAC9B;AAED,IAAA,SAAS,cAAc,CACrB,QAAoD,EACpD,KAAa,EAAA;AAEb,QAAA,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAEzC,QAAA,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;AAC7B,YAAA,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9B,SAAA;KACF;AAED,IAAA,SAAS,aAAa,CACpB,QAAoD,EACpD,KAAa,EAAA;AAEb,QAAA,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAEzC,QAAA,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AACf,QAAA,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;AAEpB,QAAA,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KACjC;AAED,IAAA,SAAS,iBAAiB,CAAC,IAAyB,EAAE,KAAa,EAAA;QACjE,IAAI,SAAS,GAAG,KAAK,CAAC;AAEtB,QAAA,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AACnB,YAAA,IAAI,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE;AACzB,gBAAA,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC3B,SAAS,GAAG,IAAI,CAAC;AAClB,aAAA;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,SAAS,EAAE;YACb,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC5D,SAAA;KACF;AAED,IAAA,SAAS,gBAAgB,CAAC,GAAa,EAAE,KAAa,EAAA;QACpD,OAAO,iBAAiB,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;KACxC;IAED,SAAS,gBAAgB,CAAC,KAAa,EAAA;AACrC,QAAA,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;AACnB,YAAA,GAAG,EAAE,EAAE;AACP,YAAA,QAAQ,EAAE,EAAE;AACb,SAAA,CAAC,CAAC;KACJ;AAED,IAAA,SAAS,UAAU,CACjB,IAAgC,EAChC,MAAqB,EACrB,KAAa,EAAA;QAEb,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC3C,QAAA,MAAM,OAAO,GAAU,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAChD,QAAA,MAAM,SAAS,GAAG,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC;AAEvC,QAAA,IAAI,SAAS,EAAE;AACb,YAAA,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YACzB,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAClC,SAAA;AAED,QAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;AAEjC,QAAA,OAAO,SAAS,CAAC;KAClB;AAED,IAAA,SAAS,iBAAiB,CACxB,OAAqC,EACrC,KAAa,EAAA;QAEb,MAAM,OAAO,GAA+B,EAAE,CAAC;QAE/C,MAAM,gBAAgB,GAAoC,EAAE,CAAC;AAE7D,QAAA,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;;AAEzB,YAAA,IAAI,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;;AAE/B,gBAAA,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG;oBAC5B,EAAE,EAAE,MAAM,CAAC,EAAE;;;AAGb,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;8BAC3B,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO;8BACnC,IAAI,CAAC;wBACT,GAAG,MAAM,CAAC,OAAO;AAClB,qBAAA;iBACF,CAAC;AACH,aAAA;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAE1C,QAAA,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;AAE7C,QAAA,IAAI,iBAAiB,EAAE;YACrB,MAAM,YAAY,GAChB,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM;AACrE,gBAAA,CAAC,CAAC;AAEJ,YAAA,IAAI,YAAY,EAAE;gBAChB,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACtD,aAAA;AACF,SAAA;KACF;AAED,IAAA,SAAS,gBAAgB,CAAC,MAAqB,EAAE,KAAa,EAAA;QAC5D,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KAC3C;AAED,IAAA,SAAS,iBAAiB,CACxB,WAAuD,EACvD,KAAa,EAAA;AAEb,QAAA,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,yBAAyB,CAChD,WAAW,EACX,QAAQ,EACR,KAAK,CACN,CAAC;AAEF,QAAA,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAClC,QAAA,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAC9B;AAED,IAAA,SAAS,gBAAgB,CAAC,MAAa,EAAE,KAAa,EAAA;QACpD,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KAC3C;IAED,OAAO;AACL,QAAA,SAAS,EAAE,iCAAiC,CAAC,gBAAgB,CAAC;AAC9D,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;AAC5C,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;AAC5C,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;AAChD,QAAA,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;AAClD,QAAA,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;AAChD,QAAA,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;AAClD,QAAA,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;AAChD,QAAA,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;KACtB,CAAC;AACjC;;ACrLgB,SAAA,wBAAwB,CACtC,QAA2B,EAC3B,YAA6B,EAAA;AAI7B,IAAA,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,GACxC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;AAEvC,IAAA,SAAS,aAAa,CAAC,MAAa,EAAE,KAAa,EAAA;QACjD,OAAO,cAAc,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KACxC;AAED,IAAA,SAAS,cAAc,CACrB,WAAuD,EACvD,KAAa,EAAA;AAEb,QAAA,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAE/C,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAC/B,CAAC,KAAK,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAC/D,CAAC;AAEF,QAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,YAAA,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtB,SAAA;KACF;AAED,IAAA,SAAS,aAAa,CAAC,MAAa,EAAE,KAAa,EAAA;QACjD,OAAO,cAAc,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KACxC;AAED,IAAA,SAAS,cAAc,CACrB,WAAuD,EACvD,KAAa,EAAA;AAEb,QAAA,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;AAC/C,QAAA,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,YAAA,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;AAC3B,SAAA;KACF;AAED,IAAA,SAAS,aAAa,CACpB,WAAuD,EACvD,KAAa,EAAA;AAEb,QAAA,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;AAC/C,QAAA,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;AACpB,QAAA,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AAEf,QAAA,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;KACpC;AAED,IAAA,SAAS,gBAAgB,CAAC,MAAqB,EAAE,KAAa,EAAA;QAC5D,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KAC3C;AAED,IAAA,SAAS,gBAAgB,CACvB,MAAe,EACf,MAAqB,EACrB,KAAa,EAAA;QAEb,IAAI,EAAE,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;AAClC,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;QAED,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAC3C,QAAA,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEhD,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAEjC,QAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAErB,QAAA,OAAO,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC;KAC7B;AAED,IAAA,SAAS,iBAAiB,CACxB,OAAqC,EACrC,KAAa,EAAA;QAEb,MAAM,MAAM,GAAY,EAAE,CAAC;AAE3B,QAAA,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AAErE,QAAA,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,YAAA,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtB,SAAA;KACF;AAED,IAAA,SAAS,gBAAgB,CAAC,MAAa,EAAE,KAAa,EAAA;QACpD,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KAC3C;AAED,IAAA,SAAS,iBAAiB,CACxB,WAAuD,EACvD,KAAa,EAAA;AAEb,QAAA,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,yBAAyB,CAChD,WAAW,EACX,QAAQ,EACR,KAAK,CACN,CAAC;AAEF,QAAA,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAClC,QAAA,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAC9B;AAED,IAAA,SAAS,cAAc,CAAC,CAAqB,EAAE,CAAqB,EAAA;AAClE,QAAA,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;AACzB,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;AAED,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjD,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACjB,SAAS;AACV,aAAA;AACD,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACb;AAED,IAAA,SAAS,KAAK,CAAC,MAAwB,EAAE,KAAa,EAAA;;AAEpD,QAAA,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;YACvB,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;AAC1C,SAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAY,CAAC;AAE7D,QAAA,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE/B,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC/C,QAAA,MAAM,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC;AAEtB,QAAA,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE;AACtC,YAAA,KAAK,CAAC,GAAG,GAAG,YAAY,CAAC;AAC1B,SAAA;KACF;IAED,OAAO;QACL,SAAS;QACT,UAAU;QACV,SAAS;AACT,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;AAChD,QAAA,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;AAChD,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;AAC5C,QAAA,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;AAC1C,QAAA,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;AAC5C,QAAA,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;AAClD,QAAA,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;KACtB,CAAC;AACjC;;SClKgB,sBAAsB,GAAA;IAKpC,SAAS,YAAY,CACnB,WAAgD,EAAA;QAEhD,MAAM,SAAS,GAAG,CAAC,KAAU,KAAK,KAAK,CAAC,GAAiB,CAAC;QAC1D,MAAM,cAAc,GAAG,CAAC,KAAU,KAAK,KAAK,CAAC,QAA6B,CAAC;AAE3E,QAAA,MAAM,SAAS,GAAG,cAAc,CAC9B,SAAS,EACT,cAAc,EACd,CAAC,GAAG,EAAE,QAAQ,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAY,CAC5D,CAAC;AAEF,QAAA,MAAM,WAAW,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC;QAEnE,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO;gBACL,SAAS;gBACT,cAAc;gBACd,SAAS;gBACT,WAAW;aACmB,CAAC;AAClC,SAAA;QAED,OAAO;AACL,YAAA,SAAS,EAAE,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC;AACjD,YAAA,cAAc,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC;AAC3D,YAAA,SAAS,EAAE,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC;AACjD,YAAA,WAAW,EAAE,cAAc,CAAC,WAAW,EAAE,WAAW,CAAC;SACvB,CAAC;KAClC;IAED,OAAO,EAAE,YAAY,EAAE,CAAC;AAC1B;;ACjCgB,SAAA,wBAAwB,CACtC,OAAA,GAGI,EAAE,EAAA;AAEN,IAAA,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAA4B;AAC1D,QAAA,YAAY,EAAE,KAAK;QACnB,QAAQ,EAAE,CAAC,QAAQ,KAChB,QAAgD,CAAC,IAAI,CAAC;AACzD,QAAA,GAAG,OAAO;KACX,CAAC;AAEF,IAAA,MAAM,YAAY,GAAG,yBAAyB,EAAS,CAAC;AACxD,IAAA,MAAM,gBAAgB,GAAG,sBAAsB,EAAS,CAAC;IACzD,MAAM,YAAY,GAAG,YAAY;AAC/B,UAAE,wBAAwB,CAAQ,QAAQ,EAAE,YAAY,CAAC;AACzD,UAAE,0BAA0B,CAAQ,QAAQ,CAAC,CAAC;IAEhD,OAAO;QACL,QAAQ;QACR,YAAY;AACZ,QAAA,GAAG,YAAY;AACf,QAAA,GAAG,gBAAgB;AACnB,QAAA,GAAG,YAAY;KAChB,CAAC;AACJ;;ACtCA;;AAEG;;ACFH;;AAEG;;;;"}