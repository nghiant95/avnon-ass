{"version":3,"file":"ngrx-slice.mjs","sources":["../../../../packages/ngrx-slice/src/lib/create-slice-actions.ts","../../../../packages/ngrx-slice/src/lib/create-slice-reducer.ts","../../../../packages/ngrx-slice/src/lib/utils/is-dictionary.ts","../../../../packages/ngrx-slice/src/lib/utils/strings.ts","../../../../packages/ngrx-slice/src/lib/create-slice-selectors.ts","../../../../packages/ngrx-slice/src/lib/create-slice.ts","../../../../packages/ngrx-slice/src/index.ts","../../../../packages/ngrx-slice/src/ngrx-slice.ts"],"sourcesContent":["import { ActionCreator, createAction, props } from '@ngrx/store';\nimport type {\n  SliceActionNameGetter,\n  SliceActions,\n  SliceCaseReducers,\n} from './typings';\n\nexport function createSliceActions<\n  SliceState,\n  SliceName extends string = string,\n  CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>\n>(\n  featureName: SliceName,\n  sliceActionNameGetter: SliceActionNameGetter,\n  reducers: CaseReducers,\n  reducersToActions?: { [K in keyof CaseReducers | 'noop']?: string }\n): SliceActions<SliceState, CaseReducers> {\n  const actions: Record<string, ActionCreator | Record<string, ActionCreator>> =\n    {};\n\n  actions['noop'] = createAction(\n    reducersToActions?.['noop'] ||\n      sliceActionNameGetter(featureName, 'noop effect'),\n    props<Record<string, unknown>>()\n  );\n\n  for (const [reducerKey, reducerValue] of Object.entries(reducers)) {\n    const typeOfReducer = typeof reducerValue;\n    const sliceActionName =\n      reducersToActions?.[reducerKey] ||\n      sliceActionNameGetter(featureName, reducerKey);\n\n    if (typeOfReducer === 'function') {\n      actions[reducerKey] = createAction(\n        sliceActionName,\n        props<Record<string, unknown>>()\n      );\n      continue;\n    }\n\n    actions[reducerKey] = {};\n    Object.keys(reducerValue).forEach((asyncKey) => {\n      (actions[reducerKey] as Record<string, ActionCreator>)[asyncKey] =\n        createAction(\n          `${sliceActionName} ${asyncKey}`,\n          props<Record<string, unknown>>()\n        );\n    });\n  }\n\n  return actions as SliceActions<SliceState, CaseReducers>;\n}\n","import type { ActionCreator, ActionReducer } from '@ngrx/store';\nimport { createReducer, on } from '@ngrx/store';\nimport { produce } from 'immer';\nimport type {\n  CaseReducer,\n  SliceActions,\n  SliceCaseReducers,\n  SliceOptions,\n} from './typings';\n\nexport function createSliceReducer<\n  SliceState extends object,\n  SliceName extends string = string,\n  CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>\n>(\n  initialState: SliceState,\n  actions: SliceActions<SliceState, CaseReducers>,\n  reducers: CaseReducers,\n  extraReducers?: SliceOptions<\n    SliceName,\n    SliceState,\n    CaseReducers\n  >['extraReducers']\n): ActionReducer<SliceState> {\n  const reducerArgs = [] as Array<ReturnType<typeof on>>;\n  const extra: Array<ReturnType<typeof on>> = (extraReducers || []) as Array<\n    ReturnType<typeof on>\n  >;\n\n  for (const [reducerKey, reducer] of Object.entries(reducers)) {\n    const typeOfReducer = typeof reducer;\n\n    if (typeOfReducer === 'function') {\n      reducerArgs.push(\n        on(actions[reducerKey] as unknown as ActionCreator, (state, payload) =>\n          produce(state, (draft) => (reducer as any)(draft, payload))\n        )\n      );\n      continue;\n    }\n\n    Object.keys(reducer).forEach((asyncKey) => {\n      const asyncReducer = (reducer as unknown as Record<string, CaseReducer>)[\n        asyncKey\n      ];\n      reducerArgs.push(\n        on(\n          (actions[reducerKey] as unknown as Record<string, ActionCreator>)[\n            asyncKey\n          ],\n          (state, payload) =>\n            produce(state, (draft) => asyncReducer(draft, payload))\n        )\n      );\n    });\n  }\n\n  return createReducer(initialState, ...(reducerArgs.concat(extra) as any));\n}\n","export function isDictionary(arg: unknown): arg is Record<string, unknown> {\n  return (\n    typeof arg === 'object' &&\n    arg !== null &&\n    !Array.isArray(arg) &&\n    !(arg instanceof Date)\n  );\n}\n","import type { CamelCase, ClassifiedCase } from '../typings';\n\nconst STRING_CAMELIZE_REGEXP = /(-|_|\\.|\\s)+(.)?/g;\n\n/**\n Returns the lowerCamelCase form of a string.\n ```javascript\n camelize('innerHTML');          // 'innerHTML'\n camelize('action_name');        // 'actionName'\n camelize('css-class-name');     // 'cssClassName'\n camelize('my favorite items');  // 'myFavoriteItems'\n camelize('My Favorite Items');  // 'myFavoriteItems'\n ```\n @method camelize\n @param {String} str The string to camelize.\n @return {String} the camelized string.\n */\nexport function camelize<TString extends string>(\n  str: TString\n): CamelCase<TString> {\n  return str\n    .replace(\n      STRING_CAMELIZE_REGEXP,\n      (_match: string, _separator: string, chr: string) => {\n        return chr ? chr.toUpperCase() : '';\n      }\n    )\n    .replace(/^([A-Z])/, (match: string) =>\n      match.toLowerCase()\n    ) as CamelCase<TString>;\n}\n\n/**\n Returns the UpperCamelCase form of a string.\n ```javascript\n 'innerHTML'.classify();          // 'InnerHTML'\n 'action_name'.classify();        // 'ActionName'\n 'css-class-name'.classify();     // 'CssClassName'\n 'my favorite items'.classify();  // 'MyFavoriteItems'\n ```\n @method classify\n @param {String} str the string to classify\n @return {String} the classified string\n */\nexport function classify<TString extends string>(\n  str: TString\n): ClassifiedCase<TString> {\n  return str\n    .split('.')\n    .map((part) => capitalize(camelize(part)))\n    .join('.') as ClassifiedCase<TString>;\n}\n\n/**\n Returns the Capitalized form of a string\n ```javascript\n 'innerHTML'.capitalize()         // 'InnerHTML'\n 'action_name'.capitalize()       // 'Action_name'\n 'css-class-name'.capitalize()    // 'Css-class-name'\n 'my favorite items'.capitalize() // 'My favorite items'\n ```\n @method capitalize\n @param {String} str The string to capitalize.\n @return {String} The capitalized string.\n */\nexport function capitalize<TString extends string>(\n  str: TString\n): Capitalize<TString> {\n  return (str.charAt(0).toUpperCase() +\n    str.substring(1)) as Capitalize<TString>;\n}\n","import type { MemoizedSelector } from '@ngrx/store';\nimport { createSelector } from '@ngrx/store';\nimport type { NestedSelectors } from './typings';\nimport { classify, isDictionary } from './utils';\n\nexport function createSliceSelectors<SliceState extends object>(\n  initialState: SliceState,\n  featureSelector: MemoizedSelector<object, SliceState>\n): NestedSelectors<SliceState> {\n  const nestedKeys = (\n    isDictionary(initialState) ? Object.keys(initialState) : []\n  ) as Array<keyof SliceState & string>;\n\n  return nestedKeys.reduce(\n    (nestedSelectors, nestedKey) => ({\n      ...nestedSelectors,\n      [`select${classify(nestedKey)}`]: createSelector(\n        featureSelector,\n        (parentState) => parentState[nestedKey]\n      ),\n    }),\n    {}\n  ) as NestedSelectors<SliceState>;\n}\n","import { createFeatureSelector } from '@ngrx/store';\nimport type { Draft } from 'immer';\nimport { createSliceActions } from './create-slice-actions';\nimport { createSliceReducer } from './create-slice-reducer';\nimport { createSliceSelectors } from './create-slice-selectors';\nimport type {\n  NamespacedSlice,\n  PayloadAction,\n  Slice,\n  SliceCaseReducers,\n  SliceOptions,\n} from './typings';\nimport { classify } from './utils';\n\nfunction defaultSliceActionNameGetter(\n  featureName: string,\n  actionName: string\n): string {\n  return `[${classify(featureName)}] ${actionName}`;\n}\n\nexport function noopReducer<\n  ActionProps = false,\n  SliceState = any\n>(): ActionProps extends false\n  ? (state: Draft<SliceState>) => void\n  : (state: Draft<SliceState>, action: PayloadAction<ActionProps>) => void {\n  return (() => {}) as unknown as ActionProps extends false\n    ? (state: Draft<SliceState>) => void\n    : (state: Draft<SliceState>, action: PayloadAction<ActionProps>) => void;\n}\n\nexport function createSlice<\n  SliceState extends object,\n  SliceName extends string = string,\n  CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>\n>({\n  name,\n  initialState,\n  reducers,\n  extraReducers,\n  reducersToActions,\n  sliceActionNameGetter = defaultSliceActionNameGetter,\n}: SliceOptions<SliceName, SliceState, CaseReducers>): Slice<\n  SliceState,\n  SliceName,\n  CaseReducers\n> {\n  const featureSelector = createFeatureSelector<SliceState>(name);\n\n  const nestedSelectors = createSliceSelectors<SliceState>(\n    initialState,\n    featureSelector\n  );\n\n  const actions = createSliceActions<SliceState, SliceName, CaseReducers>(\n    name,\n    sliceActionNameGetter,\n    reducers,\n    reducersToActions\n  );\n\n  const reducer = createSliceReducer<SliceState, SliceName, CaseReducers>(\n    initialState,\n    actions,\n    reducers,\n    extraReducers\n  );\n\n  return {\n    name,\n    reducer,\n    actions,\n    selectors: {\n      [`select${classify(name)}State`]: featureSelector,\n      ...nestedSelectors,\n    } as Slice<SliceState, SliceName, CaseReducers>['selectors'],\n  };\n}\n\nexport function createNamespacedSlice<\n  SliceState extends object,\n  SliceName extends string = string,\n  CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>\n>({\n  name,\n  initialState,\n  reducers,\n  extraReducers,\n  reducersToActions,\n  sliceActionNameGetter = defaultSliceActionNameGetter,\n}: SliceOptions<SliceName, SliceState, CaseReducers>): NamespacedSlice<\n  SliceState,\n  SliceName,\n  CaseReducers\n> {\n  const {\n    name: sliceName,\n    reducer,\n    selectors,\n    actions,\n  } = createSlice({\n    name,\n    initialState,\n    reducers,\n    extraReducers,\n    reducersToActions,\n    sliceActionNameGetter,\n  });\n\n  const classifiedName = classify(name);\n\n  return {\n    [`${classifiedName}Feature`]: {\n      name: sliceName,\n      reducer,\n    },\n    [`${classifiedName}Actions`]: actions,\n    [`${classifiedName}Selectors`]: selectors,\n  } as NamespacedSlice<SliceState, SliceName, CaseReducers>;\n}\n","/*\n * Public API Surface of ngrx-slice\n */\nexport * from './lib/create-slice';\nexport * from './lib/typings';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}