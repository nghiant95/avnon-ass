import type { Draft } from 'immer';
import type { NamespacedSlice, PayloadAction, Slice, SliceCaseReducers, SliceOptions } from './typings';
export declare function noopReducer<ActionProps = false, SliceState = any>(): ActionProps extends false ? (state: Draft<SliceState>) => void : (state: Draft<SliceState>, action: PayloadAction<ActionProps>) => void;
export declare function createSlice<SliceState extends object, SliceName extends string = string, CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>>({ name, initialState, reducers, extraReducers, reducersToActions, sliceActionNameGetter, }: SliceOptions<SliceName, SliceState, CaseReducers>): Slice<SliceState, SliceName, CaseReducers>;
export declare function createNamespacedSlice<SliceState extends object, SliceName extends string = string, CaseReducers extends SliceCaseReducers<SliceState> = SliceCaseReducers<SliceState>>({ name, initialState, reducers, extraReducers, reducersToActions, sliceActionNameGetter, }: SliceOptions<SliceName, SliceState, CaseReducers>): NamespacedSlice<SliceState, SliceName, CaseReducers>;
